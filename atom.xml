<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>范阳布衣</title>
  
  <subtitle>运维博客|自动化运维|云计算|集群</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zyrcc.cn/"/>
  <updated>2020-06-10T03:26:08.842Z</updated>
  <id>http://blog.zyrcc.cn/</id>
  
  <author>
    <name>范阳布衣</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker基础-简介</title>
    <link href="http://blog.zyrcc.cn/html/1104402425/"/>
    <id>http://blog.zyrcc.cn/html/1104402425/</id>
    <published>2020-06-10T03:17:32.000Z</published>
    <updated>2020-06-10T03:26:08.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>你需要了解的 Docker</p></blockquote><p>在了解学习 Docker 之前我们就非常有必要介绍下 Docker 的前生 LXC（Linux Container）。<br><img src="/html/1104402425/eaaf6f5d1747ce6dba67c4f7029f4d03_docker-logo.png" alt="NAME"></p><h2 id="LXC-介绍"><a href="#LXC-介绍" class="headerlink" title="LXC 介绍"></a>LXC 介绍</h2><p>LXC 可以提供轻量级的虚拟化，用来隔离进程和资源，和我们传统观念中的全虚拟化完全不一样，非常轻量级。LXC 可以将单个操作系统管理的资源划分到独立的组中，和传统的虚拟化技术相比，LXC有如下一些优势：</p><ul><li>和宿主机使用同一个内核，所以性能损耗小</li><li>不需要指令级模拟</li><li>不需要即时编译</li><li>容器可以在 CPU 核心的本地运行指令，不需要任何专门的解释机制</li><li>避免了虚拟化和系统调用中的复杂性</li><li>轻量级隔离，隔离的同时还可以和宿主机共享资源</li></ul><p>LXC 有点像 <code>chroot</code>，提供了一个拥有自己进程和网络空间的虚拟环境，但是和虚拟机又不一样，因为 LXC 是一种操作系统层面上的资源的虚拟化。</p><blockquote><p>chroot 简介</p></blockquote><blockquote><p>chroot（change root），在 Linux 系统中，系统默认的目录就都是以 / 也就是根目录开头的，chroot 的使用能够改变当前的系统根目录结构，通过改变当前系统的根目录，我们能够限制用户的权利，在新的根目录下并不能够访问旧系统根目录的结构个文件，也就建立了一个与原系统完全隔离的目录结构。<br>更多关于 chroot 的介绍，可以查看 <code>理解chroot</code> 一文。</p></blockquote><h2 id="什么是-Docker"><a href="#什么是-Docker" class="headerlink" title="什么是 Docker"></a>什么是 Docker</h2><p>Docker 并不是 LXC 替代品，Docker 底层就是使用的 LXC 来实现，LXC 将 Linux 进程沙盒化，使得进程之间相互隔离，还可以共享宿主机的资源。在 LXC 的基础上，Docker 提供了一系列更加强大方便的功能，使得 Docker 成为了现在最火的虚拟化技术。</p><p>由于之前我们的后台在开发和运维阶段的环境是不一致的，这就导致了 Docker 的出现，因为我们通过 Docker 可以将程序运行的环境也一起打包到版本控制去了，这样就排除了因为环境不同造成的各种麻烦事情了，也不会出现在本地可以在线上却不行这样的窘境了。</p><p>Docker 是一个开源的应用容器引擎，基于 go 语言开发，可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 服务器。容器是一个沙箱机制，相互之间不会有影响（类似于我们手机上运行的 app），并且容器开销是很低的。</p><p>用官方的话来说，Docker 受欢迎，是因为以下几个特点：</p><ul><li>灵活性：即使是最复杂的应用也可以集装箱化</li><li>轻量级：容器利用并共享主机内核</li><li>可互换：您可以即时部署更新和升级</li><li>便携式：您可以在本地构建，部署到云，并在任何地方运行</li><li>可扩展：您可以增加并自动分发容器副本</li><li>可堆叠：您可以垂直和即时堆叠服务<h2 id="Docker-几个重要概念"><a href="#Docker-几个重要概念" class="headerlink" title="Docker 几个重要概念"></a>Docker 几个重要概念</h2>在了解了 Docker 是什么之后，我们需要先了解下 Docker 中最重要的3个概念：镜像、容器和仓库。</li></ul><p><strong>镜像</strong> 是一个只读模板，带有创建 Docker 容器的说明，一般来说的，镜像会基于另外的一些基础镜像并加上一些额外的自定义功能来组成。比如，你可以构建一个基于 Centos 的镜像，然后在这个基础镜像上面安装一个 Nginx 服务器，这样就可以构成一个属于我们自己的镜像了。</p><p><strong>容器</strong> 是一个镜像的可运行的实例，可以使用 Docker REST API 或者 CLI 命令行工具来操作容器，容器的本质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。</p><p><strong>registry</strong> 是用来存储 Docker 镜像的仓库，Docker Hub 是 Docker 官方提供的一个公共仓库，而且 Docker 默认也是从 Docker Hub 上查找镜像的，当然你也可以很方便的运行一个私有仓库，当我们使用 docker pull 或者 docker run 命令时，就会从我们配置的 Docker 镜像仓库中去拉取镜像，使用 docker push 命令时，会将我们构建的镜像推送到对应的镜像仓库中，registry 可以理解为用于镜像的 github 这样的托管服务。</p><h2 id="容器和虚拟机"><a href="#容器和虚拟机" class="headerlink" title="容器和虚拟机"></a>容器和虚拟机</h2><p>上面我们说到了容器是在 Linux 上本机运行，并与其他容器共享主机的内核，它运行一个独立的进程，不占用其他任何可执行文件的内存，非常轻量。</p><p>而虚拟机运行的是一个完整的操作系统，通过虚拟机管理程序对主机资源进行虚拟访问，相比之下需要的资源需要更多，但是非常安全，因为是独立的操作系统，独立的内核。</p><p><img src="/html/1104402425/c2112fdc8faf1aa0754d22a8469d4733_container--vs-vm.png" alt="NAME"></p><h2 id="支持-Docker-的底层技术"><a href="#支持-Docker-的底层技术" class="headerlink" title="支持 Docker 的底层技术"></a>支持 Docker 的底层技术</h2><p>Docker 本质就是宿主机的一个进程，Docker 是通过 <code>namespace</code> 实现资源隔离，<code>通过cgroup</code> 实现资源限制，通过写时复制技术（copy-on-write）实现了高效的文件操作（类似虚拟机的磁盘比如分配 500g 并不是实际占用物理磁盘 500g）</p><h3 id="Namespaces"><a href="#Namespaces" class="headerlink" title="Namespaces"></a>Namespaces</h3><p>命名空间 (namespaces) 是 Linux为我们提供的用于分离进程树、网络接口、挂载点以及进程间通信等资源的方法。在日常使用个人 PC 时，我们并没有运行多个完全分离的服务器的需求，但是如果我们在服务器上启动了多个服务，这些服务其实会相互影响的，每一个服务都能看到其他服务的进程，也可以访问宿主机器上的任意文件，一旦服务器上的某一个服务被入侵，那么入侵者就能够访问当前机器上的所有服务和文件，这是我们不愿意看到的，我们更希望运行在同一台机器上的不同服务能做到完全隔离，就像运行在多台不同的机器上一样。而 Docker 其实就通过 Linux 的 Namespaces 技术来实现的对不同的容器进行隔离。</p><p>当我们运行（docker run 或者 docker start）一个 Docker 容器时，Docker 会为该容器设置一系列的 namespaces，这些 namespaces 提供了一层隔离，容器的各个方面都在单独的 namespace 中运行，并且对其的访问仅限于该 namespace。</p><p>Docker 在 Linux 上使用以下几个命名空间（上面说的各个方面）：</p><ul><li>pid namespace：用于进程隔离（PID：进程ID）</li><li>net namespace：管理网络接口（NET：网络）</li><li>ipc namespace：管理对 IPC 资源的访问（IPC：进程间通信（信号量、消息队列和共享内存））</li><li>mnt namespace：管理文件系统挂载点（MNT：挂载）</li><li>uts namespace：隔离主机名和域名</li><li>user namespace：隔离用户和用户组（3.8以后的内核才支持）<h3 id="CGroups"><a href="#CGroups" class="headerlink" title="CGroups"></a>CGroups</h3>我们通过 Linux 的 namespaces 技术为新创建的进程隔离了文件系统、网络、进程等资源，但是 namespaces 并不能够为我们提供物理资源上的隔离，比如 CPU、内存、IO或者网络带宽等，所以如果我们运行多个容器的话，则容器之间就会抢占资源互相影响了，所以对容器资源的使用进行限制就非常重要了，而 Control Groups（CGroups）技术就能够隔离宿主机上的物理资源。CGroups 由 7 个子系统组成：分别是 cpuset、cpu、cpuacct、blkio、devices、freezer、memory，不同类型资源的分配和管理是由各个 CGroup 子系统负责完成的。</li></ul><blockquote><p>CGroup 简介<br>在 CGroup 中，所有的任务就是一个系统的一个进程，而 CGroup 就是一组按照某种标准划分的进程，在 CGroup 这种机制中，所有的资源控制都是以 CGroup 作为单位实现的，每一个进程都可以随时加入一个 CGroup 也可以随时退出一个 CGroup。<br>– CGroup 介绍、应用实例及原理描述<br>– Docker 背后的内核 Cgroups 机制</p></blockquote><h4 id="CGroup-具有以下几个特点："><a href="#CGroup-具有以下几个特点：" class="headerlink" title="CGroup 具有以下几个特点：　　　　　　　"></a>CGroup 具有以下几个特点：　　　　　　　</h4><ul><li>CGroup 的 API 以一个伪文件系统（/sys/fs/cgroup/）的实现方式，用户的程序可以通过文件系统实现 - - CGroup的组件管理</li><li>CGroup的组件管理操作单元可以细粒度到线程级别，用户可以创建和销毁CGroup，从而实现资源载分配和再利用</li><li>所有资源管理的功能都以子系统（cpu、cpuset这些）的方式实现，接口统一子任务创建之初与其父任务处于同一个CGroup 的控制组</li></ul><p>另外 CGroup 具有四大功能：　　　　　　　　</p><ul><li>资源限制：可以对任务使用的资源总额进行限制</li><li>优先级分配：通过分配的 cpu 时间片数量以及磁盘 IO 带宽大小等，实际上相当于控制了任务运行优先级</li><li>资源统计：可以统计系统的资源使用量，如 cpu 时长，内存用量等</li><li>任务控制：cgroup 可以对任务执行挂起、恢复等操作</li></ul><h3 id="UnionFS"><a href="#UnionFS" class="headerlink" title="UnionFS"></a>UnionFS</h3><p>Linux 的命名空间和控制组分别解决了不同资源隔离的问题，前者解决了进程、网络以及文件系统的隔离，后者实现了 CPU、内存等资源的隔离，但是在 Docker 中还有另一个非常重要的问题需要解决 - 也就是镜像。</p><p>镜像到底是什么，它又是如何组成和组织的呢？而这其中最重要的概念就是镜像层(Layers)（如下图）的概念，而镜像层依赖于一系列的底层技术，比如文件系统(filesystems)、写时复制(copy-on-write)、联合挂载(union mounts)等。<br><img src="/html/1104402425/008500d53e656e2ecca12a4cf0288874_docker-filesystems.png" alt="NAME"></p><p>Docker 镜像是由一系列的层组成的，每层代表 Dockerfile 中的一条指令，比如下面的 Dockerfile 文件：</p><pre><code>FROM ubuntu:18.04COPY . /appRUN make /appCMD python /app/app.py</code></pre><blockquote><p>Dockerfile 介绍</p></blockquote><blockquote><p>Dockerfile 是一个文本文件，其内包含了一条条的指令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。Dockerfile 是我们用来构建 Docker 镜像的一个说明文档，也是我们学习的重点，必须要要掌握如何编写 Dockerfile。</p></blockquote><p>这里的 Dockerfile 包含4条命令，其中每一行就创建了一层，<code>FROM</code> 语句从 <code>ubuntu:18.04</code> 这个基础镜像创建一个层开始，<code>COPY</code> 命令从 Docker 客户端的当前目录添加一些新的文件，<code>RUN</code> 指令使用 make 命令构建应用，最后一层指定在容器中运行什么命令。</p><p>镜像就是由这些层一层一层堆叠起来的，镜像中的这些层都是只读的，当我们运行容器的时候，就可以在这些基础层至上添加新的可写层，也就是我们通常说的容器层，对于运行中的容器所做的所有更改（比如写入新文件、修改现有文件、删除文件）都将写入这个容器层，下面显示了基于 Ubuntu 15.04 镜像运行的容器层的结构：<br><img src="/html/1104402425/cfa94c0037d385b55d09e199a3b682e4_container-layers.jpg" alt="NAME"></p><p>容器和镜像之间的主要区别就是容器在镜像顶部由一个可写层，在容器中的所有操作都会存储在这个容器层中，删除容器后，容器层也会被删除，但是镜像不会变化。正因为每个容器都有自己的可写容器层，所有更改都存储在自己的容器层中，所以多个容器之间可以共享同一基础镜像的访问，但仍然具有自己的数据状态。如下图演示了多个容器共享同一镜像的请情况：<br><img src="/html/1104402425/7a62f1e65b34651fcbc5cbfb1606a4f2_sharing-layers.jpg" alt="NAME"></p><p>Docker 使用存储驱动程序来管理镜像层和可写容器层的内容，每个存储驱动程序的处理方式不同，但是所有的驱动成都使用可堆叠的镜像层和写时复制（Cow）策略，这些驱动程序管理的这些层其实就是 UnionFS（联合文件系统），现在 Docker 主要支持的存储驱动有 aufs、devicemapper、overlay、overlay4、zfs 和 vfs 等等，在最新的 Docker 中，overlay2 取代了 aufs 成为了推荐的存储驱动。</p><blockquote><p>Copy-on-write</p></blockquote><blockquote><p>写时复制是一种共享和复制文件的策略，可以最大程度地提高效率，如果文件或目录位于镜像的较低层中，而另一层（包括可写层）需要对其进行读取访问，则它直接使用现有文件即可。另一层第一次需要修改文件时（在构建镜像或运行容器时），将文件复制到该层并进行修改。这样可以将 I/O 和每个后续层的大小最小化。</p></blockquote><blockquote><p>选择存储驱动</p></blockquote><blockquote><p>对于 Docker 如何选择一个合适的存储驱动程序，可以查看官方文档 Docker storage drivers。</p></blockquote><h2 id="Docker-架构"><a href="#Docker-架构" class="headerlink" title="Docker 架构"></a>Docker 架构</h2><p>Docker 使用 C/S （客户端/服务器）体系的架构，Docker 客户端与 Docker 守护进程（Dockerd）通信，Docker 守护进程负责构建，运行和分发 Docker 容器。Docker 客户端和守护进程可以在同一个系统上运行，也可以将 Docker 客户端连接到远程 Docker 守护进程。Docker 客户端和守护进程使用 REST API 通过UNIX套接字或网络接口进行通信。<br><img src="/html/1104402425/7eea7efda8d53649e49da6a9971e0404_docker-structrue.png" alt="NAME"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;你需要了解的 Docker&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在了解学习 Docker 之前我们就非常有必
      
    
    </summary>
    
    
      <category term="容器" scheme="http://blog.zyrcc.cn/categories/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="Docker" scheme="http://blog.zyrcc.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>docker安装</title>
    <link href="http://blog.zyrcc.cn/html/846297051/"/>
    <id>http://blog.zyrcc.cn/html/846297051/</id>
    <published>2020-06-09T09:08:13.000Z</published>
    <updated>2020-06-10T00:59:06.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><h4 id="Docker是什么"><a href="#Docker是什么" class="headerlink" title="Docker是什么"></a>Docker是什么</h4><p>Docker是一个开源的应用容器引擎，使用Go语言开发，基于Linux内核的cgroup，namespace，Union FS等技术，对应用进程进行封装隔离，并且独立于宿主机与其他进程，这种运行时封装的状态称为容器。 Docker早起版本实现是基于LXC，并进一步对其封装，包括文件系统、网络互联、镜像管理等方面，极大简化了容器管理。从0.7版本以后开始去除LXC，转为自行研发的libcontainer，从1.11版本开始，进一步演进为使用runC和containerd。 Docker理念是将应用及依赖包打包到一个可移植的容器中，可发布到任意Linux发行版Docker引擎上。使用沙箱机制运行程序，程序之间相互隔离。</p><h4 id="Docker体系结构"><a href="#Docker体系结构" class="headerlink" title="Docker体系结构"></a>Docker体系结构</h4><p><img src="/html/846297051/b7ce68da59d08d901b59f80d780efb5d_65714e4ee6ccb14858814148230a3c48.png" alt="NAME"></p><ul><li>Containerd：是一个简单的守护进程，使用runC管理容器。向Docker Engine提供接口。</li><li>Shim：只负责管理一个容器。</li><li>runC：是一个轻量级的工具，只用来运行容器。</li></ul><h4 id="内部组件"><a href="#内部组件" class="headerlink" title="内部组件"></a>内部组件</h4><p>Ø  Namespaces<br>命名空间，Linux内核提供的一种对进程资源隔离的机制，例如进程、网络、挂载点等资源。<br>Ø  CGroups<br>控制组，Linux内核提供的一种限制进程资源的机制；例如CPU、内存等资源。<br>Ø  UnionFS<br>联合文件系统，支持将不同位置的目录挂载到同一虚拟文件系统，形成一种分层的模型。</p><h4 id="虚拟机与容器区别"><a href="#虚拟机与容器区别" class="headerlink" title="虚拟机与容器区别"></a>虚拟机与容器区别</h4><p>1 以KVM举例，与Docker对比</p><p>Ø  启动时间<br>Docker秒级启动，KVM分钟级启动。</p><p>Ø  轻量级<br>容器镜像大小通常以M为单位，虚拟机以G为单位。</p><p>容器资源占用小，要比虚拟机部署更快速。</p><p>Ø  性能<br>容器共享宿主机内核，系统级虚拟化，占用资源少，没有Hypervisor层开销，容器性能基本接近物理机；<br>虚拟机需要Hypervisor层支持，虚拟化一些设备，具有完整的GuestOS，虚拟化开销大，因而降低性能，没有容器性能好。</p><p>Ø  安全性<br>由于共享宿主机内核，只是进程级隔离，因此隔离性和稳定性不如虚拟机，容器具有一定权限访问宿主机内核，存在一定安全隐患。</p><p>Ø  使用要求<br>KVM基于硬件的完全虚拟化，需要硬件CPU虚拟化技术支持；</p><p>容器共享宿主机内核，可运行在主流的Linux发行版，不用考虑CPU是否支持虚拟化技术。</p><h4 id="Docker应用场景"><a href="#Docker应用场景" class="headerlink" title="Docker应用场景"></a>Docker应用场景</h4><p>场景一：节省项目环境部署时间</p><p>单项目打包<br>整套项目打包<br>新开源技术试用<br>场景二：环境一致性<br>场景三：持续集成<br>场景四：微服务<br>场景五：弹性伸缩</p><h4 id="Linux安装Docker"><a href="#Linux安装Docker" class="headerlink" title="Linux安装Docker"></a>Linux安装Docker</h4><p>版本区分 在2017年5月份左右开始划分版本</p><p>Docker EE企业版本<br>Docker CE开发版本<br>官方安装文档：<br><code>https://docs.docker.com/engine/installation/linux/docker-ce/centos/#docker-ee-customers</code></p><p>CentOS7安装docker<br>安装依赖包</p><pre><code>yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre><p>添加Docker软件包源</p><pre><code>yum-config-manager \--add-repo \https://download.docker.com/linux/centos/docker-ce.repo</code></pre><p>更新yum包索引</p><pre><code>yum makecache fast</code></pre><p>安装Docker CE</p><pre><code>yum install docker-ce</code></pre><p>启动</p><pre><code>systemctl start dockersystemcet enable docker</code></pre><p>卸载</p><pre><code>yum remove docker-ce rm -rf /var/lib/docker</code></pre><p>查看docker版本</p><pre><code>docker info</code></pre><p>安装指定版本的Docker-CE:</p><pre><code># Step 1: 查找Docker-CE的版本:# yum list docker-ce.x86_64 --showduplicates | sort -r#   Loading mirror speeds from cached hostfile#   Loaded plugins: branch, fastestmirror, langpacks#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable#   Available Packages# Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)# sudo yum -y install docker-ce-[VERSION]# yum -y install docker-ce-17.12.0.ce-1.el7.centos</code></pre><p>Ubuntu14.06/16.04<br>安装证书</p><pre><code>sudo apt-get install \apt-transport-https \a-certificates \curl \software-properties-common</code></pre><p>添加Docker源的KEY</p><pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></pre><p>添加Docker软件包源</p><pre><code>sudo add-apt-repository \&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) \stable&quot;</code></pre><p>更新apt包索引</p><pre><code>sudo apt-get update</code></pre><p>安装</p><pre><code>sudo apt-get install docker-ce</code></pre><p>卸载</p><pre><code>sudo apt-get purge docker-cesudo rm -rf /var/lib/docker</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;docker安装&quot;&gt;&lt;a href=&quot;#docker安装&quot; class=&quot;headerlink&quot; title=&quot;docker安装&quot;&gt;&lt;/a&gt;docker安装&lt;/h2&gt;&lt;h4 id=&quot;Docker是什么&quot;&gt;&lt;a href=&quot;#Docker是什么&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="容器" scheme="http://blog.zyrcc.cn/categories/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="Docker" scheme="http://blog.zyrcc.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装图形界面</title>
    <link href="http://blog.zyrcc.cn/html/938704051/"/>
    <id>http://blog.zyrcc.cn/html/938704051/</id>
    <published>2020-06-09T09:02:21.000Z</published>
    <updated>2020-06-10T01:01:30.714Z</updated>
    
    <content type="html"><![CDATA[<h3 id="登录云主机，执行命令："><a href="#登录云主机，执行命令：" class="headerlink" title="登录云主机，执行命令："></a>登录云主机，执行命令：</h3><p>1.安装x window包<br><code>yum -y groupinstall &quot;X Window System&quot;</code></p><p>2.#安装Gnome包<br><code>yum -y groupinstall &quot;GNOME Desktop&quot;</code></p><p>3.#运行级别启动图形界面<br><code>ln -sf /lib/systemd/system/runlevel5.target /etc/systemd/system/default.target</code></p><p>4.重启服务器生效<br><code>reboot</code></p><p>重启后通过控制台，远程连接vnc功能登录，可以看到图形界面，如图：<br>X Window<br><img src="/html/938704051/66061383962f8eed32cfc7d0fb2b25ee_7fa8282ad93047a.jpg" alt="NAME"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;登录云主机，执行命令：&quot;&gt;&lt;a href=&quot;#登录云主机，执行命令：&quot; class=&quot;headerlink&quot; title=&quot;登录云主机，执行命令：&quot;&gt;&lt;/a&gt;登录云主机，执行命令：&lt;/h3&gt;&lt;p&gt;1.安装x window包&lt;br&gt;&lt;code&gt;yum -y grou
      
    
    </summary>
    
    
      <category term="CentOS 7" scheme="http://blog.zyrcc.cn/categories/CentOS-7/"/>
    
    
      <category term="X-Window" scheme="http://blog.zyrcc.cn/tags/X-Window/"/>
    
  </entry>
  
  <entry>
    <title>Centos 使用Systemctl报Error getting authority</title>
    <link href="http://blog.zyrcc.cn/html/3351943243/"/>
    <id>http://blog.zyrcc.cn/html/3351943243/</id>
    <published>2020-06-09T08:56:44.000Z</published>
    <updated>2020-06-09T09:01:10.683Z</updated>
    
    <content type="html"><![CDATA[<p>Centos 使用Systemctl报Error getting authority: Error initializing authority: Error calling StartServiceByName for org.freedesktop.PolicyKit1: Timeout was reached (g-io-error-quark, 24)<br>在使用centos7.4 安装服务的时候报错：</p><pre><code>Error getting authority: Error initializing authority: Error calling StartServiceByName for org.freedesktop.PolicyKit1: Timeout was reached (g-io-error-quark, 24)</code></pre><p>解决：</p><pre><code>ps -ef |grep polkit</code></pre><p>再安装：</p><pre><code>pyum reinstall polkit</code></pre><p>再重启,就可以解决</p><pre><code>reboot</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Centos 使用Systemctl报Error getting authority: Error initializing authority: Error calling StartServiceByName for org.freedesktop.PolicyKit1
      
    
    </summary>
    
    
      <category term="Systemctl" scheme="http://blog.zyrcc.cn/categories/Systemctl/"/>
    
    
      <category term="Systemctl" scheme="http://blog.zyrcc.cn/tags/Systemctl/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统升级时不升内核操作</title>
    <link href="http://blog.zyrcc.cn/html/1487789122/"/>
    <id>http://blog.zyrcc.cn/html/1487789122/</id>
    <published>2020-06-09T07:05:39.000Z</published>
    <updated>2020-06-09T08:01:07.080Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>RedHat/CentOS使用 yum update 更新时，默认会升级内核。但有些服务器硬件在升级内核后，新的内核可能会认不出某些硬件，要重新安装驱动，很麻烦。所以在生产环境中不要轻易的升级内核，除非您确定升级内核后不会出现麻烦的问题。</p></blockquote><p>如果使用yum update更新时不升级内核，有两种方法：</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>直接在yum的命令后面加参数，这个命令只生效一次：<br><code>yum update --exclude=kernel*</code></p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>修改yum命令的配置文件，永久生效。<br>这里以 CentOS 6.6 为例来进行说明：</p><p>1、首先检查内核版本以及系统版本。</p><pre><code>[root@localhost ~]# uname -r2.6.32-504.el6.x86_64[root@localhost ~]# cat /etc/issueCentOS release 6.6 (Final)Kernel \r on an \m</code></pre><p>2、将配置文件保存备份。</p><pre><code>[root@localhost ~]# cp /etc/yum.conf /etc/yum.conf.bak</code></pre><p>3、编辑/etc/yum.conf文件。</p><pre><code>[root@localhost ~]# vi /etc/yum.conf</code></pre><p><img src="/html/1487789122/1591686764931.png" alt="NAME"></p><p>4、在[main]的后面加入如下内容：</p><pre><code>exclude=kernel*</code></pre><p><img src="/html/1487789122/82240e8137a6e61ec8279de60f5e6553_7fa8282ad93047a-1.png" alt="NAME"></p><p>5、按下Esc，输入下面命令进行保存：wq。</p><p>6、使用 yum update更新。</p><pre><code>[root@localhost yum.repos.d]# yum update</code></pre><p>7、等到<code>yum update</code>更新完成之后重启电脑，再来检查内核版本。</p><pre><code>[root@localhost ~]# uname -r2.6.32-504.el6.x86_64[root@localhost ~]# cat /etc/issueCentOS release 6.8 (Final)Kernel \r on an \m</code></pre><p><img src="/html/1487789122/b497bebf8544aa78b323a7c91d231147_7fa8282ad93047a.png" alt="NAME"></p><p>可以看到<code>yum update</code>后系统版本升级了，内核版本没有升级。如果同时要禁止升级系统，则在其 <code>[main]</code> 部分末尾增加 <code>“exclude=kernel centos-release”</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;RedHat/CentOS使用 yum update 更新时，默认会升级内核。但有些服务器硬件在升级内核后，新的内核可能会认不出某些硬件，要重新安装驱动，很麻烦。所以在生产环境中不要轻易的升级内核，除非您确定升级内核后不会出现麻烦的问题。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.zyrcc.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.zyrcc.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>hexo杂记</title>
    <link href="http://blog.zyrcc.cn/html/3351943245/"/>
    <id>http://blog.zyrcc.cn/html/3351943245/</id>
    <published>2020-06-09T06:58:21.000Z</published>
    <updated>2020-06-09T08:28:13.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo杂记"><a href="#Hexo杂记" class="headerlink" title="Hexo杂记"></a>Hexo杂记</h2><p>hexo d后 <code>ERROR Deployer not found: git</code></p><p><code>$ hexo d</code><br><code>ERROR Deployer not found: git</code></p><p><code>npm install --save hexo-deployer-git</code></p><p>如果想要在Hexo放图片可以安装 hexo-asset-image插件：</p><p>在_config.yml文件中设置 post_asset_folder: true</p><p>$npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> – save</p><p>当用户创建文章的时候，同时在post会创建一个一样的文件夹，在图片中放入这个文件</p><p><code>![NAME](文章名字/图片.jpg)</code></p><h5 id="新建文章可用Hexo命令创建："><a href="#新建文章可用Hexo命令创建：" class="headerlink" title="新建文章可用Hexo命令创建："></a>新建文章可用Hexo命令创建：</h5><p>hexo new <title></title></p><p>生成（文章）时默认生成categories配置项<br>categories有点类似tags，写在文章属性之中，所以需要在文章生成时添加categories属性。<br>编辑/scaffolds/post.md，在最下面添加一行categories</p><p><code>title: hexo杂记</code><br><code>date: 1591685901000</code><br><code>tags:</code><br><code>categories:</code></p><h5 id="生成分类、归档、标签"><a href="#生成分类、归档、标签" class="headerlink" title="生成分类、归档、标签"></a>生成分类、归档、标签</h5><p>hexo new page “categories”</p><h5 id="修改文章永久链接为随机编号"><a href="#修改文章永久链接为随机编号" class="headerlink" title="修改文章永久链接为随机编号"></a>修改文章永久链接为随机编号</h5><ul><li><p>安装abbrlink插件<br>npm install hexo-abbrlink –save</p></li><li><p>编辑站点配置文件<br>打开博客根目录下的站点配置文件_config.yml，修改如下配置：</p><pre><code>#permalink: :year/:month/:day/:title/#permalink_defaults:permalink: posts/:abbrlink/abbrlink:alg: crc32 #support crc16(default) and crc32rep: dec   #support dec(default) and hex</code></pre></li><li><p>下面解释说明一下：</p></li></ul><p>首先指定Hexo文章永久链接的格式，接下来两个是abbrlink插件的设置：</p><pre><code>alg -- Algorithm (currently support crc16 and crc32, which crc16 is default)rep -- Represent (the generated link could be presented in hex or dec value)</code></pre><p>这两个设置的示例如下：</p><pre><code>crc16 &amp; hexhttps://post.zz173.com/posts/66c8.htmlcrc16 &amp; dechttps://post.zz173.com/posts/65535.htmlcrc32 &amp; hexhttps://post.zz173.com/posts/8ddf18fb.htmlcrc32 &amp; dechttps://post.zz173.com/posts/1690090958.html</code></pre><p>使用hexo clean &amp;&amp; hexo g重新生成博客，在博客源文件可以看到自动生成的abbrlink编号：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hexo杂记&quot;&gt;&lt;a href=&quot;#Hexo杂记&quot; class=&quot;headerlink&quot; title=&quot;Hexo杂记&quot;&gt;&lt;/a&gt;Hexo杂记&lt;/h2&gt;&lt;p&gt;hexo d后 &lt;code&gt;ERROR Deployer not found: git&lt;/code&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://blog.zyrcc.cn/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://blog.zyrcc.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>tomcat</title>
    <link href="http://blog.zyrcc.cn/html/2453715852/"/>
    <id>http://blog.zyrcc.cn/html/2453715852/</id>
    <published>2020-06-09T06:06:26.000Z</published>
    <updated>2020-06-09T08:01:07.082Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Tomcat" scheme="http://blog.zyrcc.cn/categories/Tomcat/"/>
    
    
      <category term="tomcat" scheme="http://blog.zyrcc.cn/tags/tomcat/"/>
    
      <category term="web" scheme="http://blog.zyrcc.cn/tags/web/"/>
    
  </entry>
  
</feed>
